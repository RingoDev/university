import java.util.*;
import java.util.stream.*;
COMPILER ScrumTaskboard

/* Stefan Schiffer, 29.11.2020 */

/*----------------------------------------------------------
  --- GLOBAL FIELDS AND METHODS
  ----------------------------------------------------------*/

    void println(String string) { 
		System.out.println(string);
	}


    List<String> semErrors = new ArrayList<>();

    Comparator<Task> taskComparator = (o1, o2) -> {
       int number1 = Integer.parseInt(o1.id.substring(0, o1.id.length() - 1));
       int number2 = Integer.parseInt(o2.id.substring(0, o2.id.length() - 1));
       Character char1 = o1.id.charAt(o1.id.length() - 1);
       Character char2 = o2.id.charAt(o2.id.length() - 1);
       if (number1 == number2) return char1.compareTo(char2);
       else return number1 - number2;
    };
    Comparator<Developer> developerComparator = Comparator.comparing(d -> d.initials);
    Set<Task> tasks = new TreeSet<>(taskComparator);
    List<Booking> bookings = new ArrayList<>();
    Set<Developer> devs = new TreeSet<>(developerComparator);
    Task collectorTask;
    final String COLLECTOR_TASK_ID = "999a";
    Developer collectorDeveloper;
    final String COLLECTOR_DEVELOPER_INITIALS = "XXXX";


    void insertDev(Developer dev) {
        if (devs.stream().anyMatch(d -> d.initials.equals(dev.initials))) {
            SemErr("Entwickler/in " + dev.initials + " mehrfach gelistet. Der letzte Eintrag zÃÂ¤hlt.");
            devs.removeIf(d -> d.initials.equals(dev.initials));
        }
        devs.add(dev);
    }

    void insertTask(Task task) {
        if (getTask(task.id) != null) {
            SemErr("Aufgabe " + task.id + " mehrfach gelistet. Der letzte Eintrag zählt.");
            tasks.removeIf(t -> t.id.equals(task.id));
        }
        tasks.add(task);
    }

    Booking createBooking(String id) {
        Booking booking = new Booking();
        if (getTask(id) == null) {
            SemErr("Aufgabe " + id + " nicht gelistet. Die Buchungen fÃ¼r diese Aufgabe werden der Sammelaufgabe\n" +
                    COLLECTOR_TASK_ID + " zugeordnet.");
            if (collectorTask == null) {
                collectorTask = new Task();
                collectorTask.id = COLLECTOR_TASK_ID;
                collectorTask.status = "none";
                collectorTask.duration = 0.0;
                collectorTask.comment = "UNASSIGNED TASK";
            }
            booking.task = collectorTask;
        } else {
            booking.task = getTask(id);
        }
        return booking;
    }

    Developer getDev(String initials) {
        Developer dev = devs.stream().filter(d -> d.initials.equals(initials)).findFirst().orElse(null);
        if (dev == null) {
            SemErr("Entwickler/in mit den Initialen " + initials + " wird in einer Buchung angeführt aber nicht in der Entwicklerliste. Die Buchung wird dem Sammelentwickler mit den Initialen " + COLLECTOR_DEVELOPER_INITIALS + " zugeordnet");
            if (collectorDeveloper == null) {
                collectorDeveloper = new Developer();
                collectorDeveloper.initials = COLLECTOR_DEVELOPER_INITIALS;
                collectorDeveloper.name = "UNASSIGNED DEV";
            }
            return collectorDeveloper;
        }
        return dev;
    }

    Task getTask(String id) {
        return tasks.stream().filter(task -> task.id.equals(id)).findFirst().orElse(null);
    }

    List<Entry> getEntries() {
        return bookings.stream().flatMap(b -> b.entries.stream()).collect(Collectors.toList());
    }

    List<Task> getTasksWithStatus(String status) {
        return tasks.stream().filter(t -> status.equals(t.status)).sorted(taskComparator).collect(Collectors.toList());
    }

    Set<Developer> getParticipants() {
        Set<Developer> set = new TreeSet<>(Comparator.comparing(d -> d.initials));
        set.addAll(bookings.stream().flatMap(b -> b.entries.stream()).flatMap(e -> e.singleEntries.stream()).map(s -> s.dev).filter(d -> !d.initials.equals(COLLECTOR_DEVELOPER_INITIALS)).collect(Collectors.toList()));
        return set;
    }

    Set<Developer> getNonParticipants() {
        Set<Developer> participants = getParticipants();
        return devs.stream().filter(dev -> !participants.contains(dev)).collect(Collectors.toSet());
    }

    double getWorktime(Developer dev) {
        List<SingleEntry> list = bookings.stream().flatMap(b -> b.entries.stream()).flatMap(e -> e.singleEntries.stream())
                .filter(se -> se.dev == dev).collect(Collectors.toList());
        return list.stream().map(e -> e.hours).reduce(0.0, Double::sum);
    }

    double getTaskRestduration(Task task) {
        List<Entry> list = bookings.stream().filter(b -> b.task == task).flatMap(b -> b.entries.stream()).sorted((e1, e2) -> e2.date.compareTo(e1.date)).collect(Collectors.toList());
        return list.stream().findFirst().map(e -> e.rest).orElse(task.duration);
    }

    double getHoursBooked(Task task) {
        return bookings.stream().filter(b -> b.task == task).flatMap(b -> b.entries.stream()).flatMap(e -> e.singleEntries.stream())
                .map(se -> se.hours).reduce(0.0, Double::sum);
    }

    List<Developer> developersOnDate(String date) {
        return getEntries().stream().filter(e -> date.equals(e.date)).flatMap(e -> e.singleEntries.stream()).map(se -> se.dev).collect(Collectors.toList());
    }

    double workhoursOnDate(String date) {
        return getEntries().stream().filter(e -> date.equals(e.date)).flatMap(e -> e.singleEntries.stream()).map(se -> se.hours).reduce(0.0, Double::sum);
    }

    Set<String> getDates() {
        Set<String> set = new TreeSet<>(String::compareTo);
        set.addAll(getEntries().stream().map(e -> e.date).collect(Collectors.toList()));
        return set;
    }


    static class Developer{
        String initials;
        String name;
        double worktime;
        Developer(){
        this.worktime = 0.0;
        }
    }

    static class Task{
        String id;
        String status;
        double duration;
        String comment;
    }

    static class Booking{
        Task task;
        List<Entry> entries;

        Booking(){
        this.entries = new ArrayList<>();
        }
    }

    static class Entry{
        String date;
        double rest;
        List<SingleEntry> singleEntries;
        Entry(){
        this.singleEntries = new ArrayList<>();
        }
    }

    static class SingleEntry{
        Developer dev;
        double hours;
        SingleEntry(Developer dev, double hours){
            this.dev = dev;
            this.hours = hours;
        }
    }



	
/*----------------------------------------------------------
  --- SCANNER
  ----------------------------------------------------------*/

CHARACTERS
    digit =  "0123456789".
    hour1st	= "012".
    min1st = "012345".
    letter =  'a'..'z'. 
    anyButQuote = ANY - '"'.

TOKENS
    initials = letter { letter }.
    string = '"' { anyButQuote } '"'.
    date = digit digit digit digit '-' digit digit '-' digit digit.
    time = hour1st digit ':' min1st digit.
    id = digit {digit} letter.
    duration = digit {digit} ["." digit].
    open = "open".
    active = "active".
    done = "done".
   
COMMENTS FROM "/*" TO "*/" NESTED

IGNORE '\r' + '\n' + '\t'

/*----------------------------------------------------------
  --- PARSER
  ----------------------------------------------------------*/

PRODUCTIONS

ScrumTaskboard =



	
    "Export" "of" "Taskboard" Date<out String date> time
    "Developers"
	{ Developer }

    "Tasks"
    { Task }

    "Bookings"
    { Booking}



    (.
        semErrors.forEach(e -> println(">>>Fehler: "+e));
        println("");
    .)
	(.
        println("");
        println("Diese " + getParticipants().size() + " Entwickler/innen waren beim Sprint dabei: " + getParticipants().stream().map(d -> d.initials).collect(Collectors.toList()).toString());
        println("Diese " + getNonParticipants().size() + " Entwickler/innen fehlten beim Sprint: " + getNonParticipants().stream().map(d -> d.initials).collect(Collectors.toList()).toString());
        println("");
	.)

    (.
        println("");
        List<Developer> result = getParticipants().stream().sorted((p1, p2) -> (int) (10 * (getWorktime(p2) - getWorktime(p1)))).collect(Collectors.toList());
        println("Die einzelnen Entwickler/innen leisteten folgende Stunden:");
        for (Developer dev: result)
        println("    - " + dev.name + " " + "[" + dev.initials + "] " + getWorktime(dev) + " Stunden");
    .)
    (.
        println("");
        List<Task> overTwo = tasks.stream().filter(t -> t.duration > 2).collect(Collectors.toList());
        println("Diese "+overTwo.size() +" Aufgaben haben eine ErstschÃ¤tzung > 2 Personentage: " +overTwo.stream().map(d -> d.id).collect(Collectors.toList()).toString());
    .)
    (.
        List<Task> finishedOverZero = getTasksWithStatus("done").stream().filter(t -> getTaskRestduration(t) > 0).collect(Collectors.toList());
        println("Diese " + finishedOverZero.size() + " Aufgaben haben den Status 'erledigt' mit Restaufwand > 0 Stunden: " + finishedOverZero.stream().map(t -> t.id).collect(Collectors.toList()).toString());
    .)

    (.
		println("");
		double active = 0;
		double done = 0;
		for (Task task : getTasksWithStatus("active")) {
		   active += getHoursBooked(task);
		}
		for (Task task : getTasksWithStatus("done")) {
			done += getHoursBooked(task);
		}
		println("FÃÂÃÂÃÂÃÂ¼r diese " + getTasksWithStatus("active").size() + " aktiven Aufgaben wurden insgesamt " + active + " Stunden gebucht:" +
                getTasksWithStatus("active").stream().map(t -> t.id).collect(Collectors.toList()).toString());
        println("FÃÂÃÂÃÂÃÂ¼r diese " + getTasksWithStatus("done").size() + " erledigten Aufgaben wurden insgesamt " + done + " Stunden gebucht:" +
                getTasksWithStatus("done").stream().map(t -> t.id).collect(Collectors.toList()).toString());
    .)
    (.
        println("");
        println("Für die einzelnen aktiven Aufgaben wurde folgender Arbeitsaufwand gebucht:");
        getTasksWithStatus("active").forEach(t -> println("  - "+t.comment + " "+ "["+t.id+"]"+ " " + getHoursBooked(t) + " Stunden"));
        println("");
        println("Für die einzelnen erledigten Aufgaben wurde folgender Arbeitsaufwand gebucht:");
        getTasksWithStatus("done").forEach(t -> println("  - "+t.comment + " "+ "["+t.id+"]"+ " " + getHoursBooked(t) + " Stunden"));
    .)
    (.
        println("");
        println("An den folgenden " + getDates().size() + " Tagen buchten die gelisteten Entwickler/innen den angeführten Arbeitsaufwand:");
        for (String bookingDate : getDates()) {
            println("      " + bookingDate + " insgesamt " + workhoursOnDate(bookingDate) + " Stunden: " +
                    developersOnDate(bookingDate).stream().map(d -> d.initials).collect(Collectors.toSet()).toString());
        }
        println("");
    .)
	.

Date<out String date> =
    date (.date = t.val;.)
    .

Developer (.Developer dev = new Developer();.)
=
    Initials<^ String initials>             (.dev.initials = initials;.)
    Name<^String name>                      (.dev.name = name;.)
    (.insertDev(dev);.)
	.
		
Initials<^String initials> =
	initials (. initials = t.val; .)
	.

Task (.Task task = new Task();.)=
    Id<out String id>                   (.task.id = id;.)
    [Status<out String status>          (.task.status = status;.)]
    Restduration<out double days>           (.task.duration = days;.)
    Name<out String comment>         (.task.comment = comment;.)
    (.insertTask(task);.)
    .

Id<out String id> =
    id (.id = t.val;.)
    .

Status<out String status> (.status = "none";.)
=
    open (.status = t.val;.) |
    active (.status = t.val;.) |
    done (.status = t.val;.)
    .

Restduration<out double days> =
    duration (.days = Double.parseDouble(t.val);.)
    .

Name<out String comment> =
    string      (.comment = t.val.replace("\"","");.)
    .

Booking (.Entry entry;.)
=
    Id<out String id>               (.Booking booking = createBooking(id);.)
    Date<out String date>           (.entry = new Entry();entry.date = date;.)
    Restduration<out double days>       (.entry.rest = days;.)
    Initials<out String i>          (.Developer dev = getDev(i);.)
    Worktime<out double hours>      (.entry.singleEntries.add(new SingleEntry(dev,hours));.)
    {
        Initials<out i>
        Worktime<out hours>         (.entry.singleEntries.add(new SingleEntry(getDev(i),hours));.)
    }
                                    (.booking.entries.add(entry);.)
    {                               (.entry = new Entry();.)
        Date<out date>              (.entry.date = date;.)
        Restduration<out days>          (.entry.rest = days;.)
        Initials<out i>             (.dev = getDev(i);.)
        Worktime<out hours>         (.entry.singleEntries.add(new SingleEntry(dev,hours));.)
        {
            Initials<out i>         (.dev = getDev(i);.)
            Worktime<out hours>     (.entry.singleEntries.add(new SingleEntry(dev,hours));.)
        }
                                    (.booking.entries.add(entry);.)
     }
                                    (.bookings.add(booking);.)
    .

Worktime<out double hours> =
    duration (. hours = Double.parseDouble(t.val);.)
    .



END ScrumTaskboard.
